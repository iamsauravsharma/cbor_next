searchState.loadedDescShard("cbor_next", 0, "Library to handle a Concise Binary Object Representation …\nModule for different type of content\nModule containing a data item\nModule containing different deterministic mode\nModule containing different type of error\nModule for index\nStruct which holds a array content\nStruct which holds a byte data\nGeneric tag which current version of crate have no …\nStruct which holds a map content\nstruct representing simple value which only allow number …\nenum representing a tag in form of u64 and data item\nStruct which holds a text content\nGet array\nGet array as mut\nGet chunk of  bytes from a byte content\nGet chunk of  strings from a string content\nGet a content of tag\nExtend byte content by value\nExtend array with provided array\nExtend map content with provided map\nExtend text content by string list\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet full bytes from a byte content\nGet full strings from a string content\ninsert new data to index map\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet whether a byte content is indefinite or not\nGet whether a string content is indefinite or not\nGet whether a array content is indefinite or not\nGet whether a map content is indefinite or not\nGet map\nGet map as mut\nGet a number of tag\nPush bytes to byte content\npush a data item to array\npush new string to a text content\nSet value of a content by overriding old data present …\nSet value to a content by overriding old value\nSet value to a content by overriding old value\nSet a content as an indefinite content\nSet a content as an indefinite content\nSet a content as an indefinite content\nSet a content as an indefinite content\nSet value of a content by overriding old data present …\nArray of <code>CBOR</code> data items represented by <code>CBOR</code> major type 4.\nBoolean represented as a simple value within <code>CBOR</code> major …\nByte string represented by <code>CBOR</code> major type 2.\nEnum representing different types of data item that can be …\nFloating-point number represented as a simple value within …\nAn generic simple value represented by <code>CBOR</code> major type 7.\nMap of <code>CBOR</code> key-value pairs represented by <code>CBOR</code> major type …\nNull represented as a simple value within <code>CBOR</code> major type …\nNegative integer represented by <code>CBOR</code> major type 1.\nTagged item (semantic tag) represented by <code>CBOR</code> major type …\nUTF-8 string (text string) represented by <code>CBOR</code> major type …\nUndefined represented as a simple value within <code>CBOR</code> major …\nUnsigned integer represented by <code>CBOR</code> major type 0.\nGet as array\nGet as boolean number\nGet as byte\nGet as floating number\nGet as map\nGet as number which can be both signed or unsigned\nGet as signed number. This will always return negative …\nGet as simple index value\nGet as tag\nGet a list of nested list of tags and its internal data …\nGet as text\nGet as unsigned number\nRecursively checks nested CBOR data items until a non-tag …\nDecode a CBOR representation to a value\nGet a deterministic ordering form in provided mode\nGet a CBOR encoded representation of value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs a array value?\nIs a boolean value?\nIs a byte value?\nCheck current data item is deterministic form\nIs a floating value?\nIs a generic simple value?\nIs a integer? Can be both signed as well as unsigned\nIs a map value?\nIs a null value?\nIs a signed integer value?\nIs a simple value?\nIs a tag value?\nIs a text value?\nIs a undefined value?\nIs a unsigned integer value?\nGet a major type of a value\nCore\nDifferent mode supported for deterministic format\nLength first\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnum representing error for a crate\nError converting to a required integer\nError generated when converting string from utf8 bytes\nIncomplete CBOR bytes\nIncomplete indefinite length data\nInvalid break stop position\nInvalid simple value\nNot well formed data\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait which is used to get a data item from data item\nGet a index value\nGet a mutable index value")