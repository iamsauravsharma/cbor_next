searchState.loadedDescShard("cbor_next", 0, "Library to handle a Concise Binary Object Representation …\nModule for different type of content\nModule containing a data item\nModule containing different deterministic mode\nModule containing different type of error\nModule for index\nStruct which holds a array content\nStruct which holds a byte content\nStruct which holds a map content\nstruct representing simple value which only allow number …\nStruct which holds a text content\nAdd value to a content this does not remove old value but …\nAdd value to a content this does not remove old value but …\nGet array\nGet array as mut\nGet chunk of  bytes from a byte content\nGet chunk of  strings from a string content\nExtend value to a content this does not remove old vector …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet full bytes from a byte content\nGet full strings from a string content\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet whether a byte content is indefinite or not\nGet whether a string content is indefinite or not\nGet whether a array content is indefinite or not\nGet whether a map content is indefinite or not\nGet map\nGet map as mut\nSet value to a content if needed it would override old …\nSet value to a content by overriding old value\nSet value to a content by overriding old value\nSet a indefinite value to provided value\nSet a indefinite value to provided value\nSet a indefinite value to provided value\nSet a indefinite value to provided value\nSet value to a content if needed it would override old …\nArray of <code>CBOR</code> data items represented by <code>CBOR</code> major type 4.\nBoolean represented as a simple value within <code>CBOR</code> major …\nByte string represented by <code>CBOR</code> major type 2.\nEnum representing different types of data item that can be …\nFloating-point number represented as a simple value within …\nAn generic simple value represented by <code>CBOR</code> major type 7.\nMap of <code>CBOR</code> key-value pairs represented by <code>CBOR</code> major type …\nNull represented as a simple value within <code>CBOR</code> major type …\nNegative integer represented by <code>CBOR</code> major type 1.\nTagged item (semantic tag) represented by <code>CBOR</code> major type …\nUTF-8 string (text string) represented by <code>CBOR</code> major type …\nUndefined represented as a simple value within <code>CBOR</code> major …\nUnsigned integer represented by <code>CBOR</code> major type 0.\nGet as array\nGet as boolean number\nGet as byte\nGet as floating number\nRecursively extract tagged values, collecting all tag …\nGet as map\nGet as signed number\nGet as simple index value\nGet as tag\nGet as text\nGet as unsigned number\nRecursively checks nested CBOR data items until a non-tag …\nDecode a CBOR representation to a value\nGet a deterministic ordering form in provided mode\nGet a CBOR encoded representation of value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs a array value?\nIs a boolean value?\nIs a byte value?\nCheck current data item is deterministic form\nIs a floating value?\nIs a generic simple value?\nIs a map value?\nIs a null value?\nIs a signed integer value?\nIs a simple value?\nIs a tag value?\nIs a text value?\nIs a undefined value?\nIs a unsigned integer value?\nGet a major type of a value\nCore\nDifferent mode supported for deterministic format\nLength first\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnum representing error for a crate\nError converting to a required integer\nError generated when converted string from utf8 bytes\nIncomplete CBOR bytes\nIncomplete indefinite length data\nInvalid break stop position\nInvalid simple value\nNot well formed data\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait which is used to get a data item from data item\nGet a index value\nGet a mutable index value")